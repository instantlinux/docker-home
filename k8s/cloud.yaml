# Usage:
#  Update Makefile.vars to suit
#  Create secrets nextcloud-db-password (with a random string) and
#    nextcloud-secret (with blank content)
#  In your bash environment, define these:
#    export NC_DB_SCHEMA=
#    export NC_INSTANCEID=
#    export NC_PASSWORDSALT=
#  After initial startup, update your startup shell variables based on:
#    kubectl exec cloud-xxx diff /var/www/html/config/config.php \
#      /var/www/html/config/config.php.k8s
#  and update the nextcloud-secret with base64 code of generated content.
#  Note that the DB_SCHEMA is called "version" in config.php; this will
#  need updating after each upgrade.
---
apiVersion: v1
kind: Service
metadata:
  name: $SERVICE_NAME
spec:
  clusterIP: None
  ports:
  - port: 80
  selector:
    app.kubernetes.io/name: $SERVICE_NAME
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: $SERVICE_NAME
  name: $SERVICE_NAME
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $SERVICE_NAME
    spec:
      containers:
      - name: $SERVICE_NAME
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nextcloud-db-password
              key: nextcloud-db-password
        - name: SECRET
          valueFrom:
            secretKeyRef:
              name: nextcloud-secret
              key: nextcloud-secret
        # NOTE - when updating, set this to 1 and set prev version
        # (makefile var VERSION_NEXTCLOUD_PREV) to the old version
        # to be upgraded
        - { name: NEXTCLOUD_UPDATE, value: "0" }
        - { name: REDIS_HOST, value: $SERVICE_NAME-redis }
        - { name: TZ, value: $TZ }
        image: nextcloud:$VERSION_NEXTCLOUD
        command: [/bin/bash]
        args:
        - -c
        - >
          set -x &&
          usermod -a -G $NEXTCLOUD_GROUP www-data &&
          umask $NEXTCLOUD_UMASK &&
          cp /var/www/html/config/config.php.k8s \
            /var/www/html/config/config.php &&
          chown www-data /var/www/html/config/config.php &&
          exec /entrypoint.sh apache2-foreground
        resources:
          limits:
            memory: 6144Mi
          requests:
            cpu: 100m
            memory: 768Mi
        volumeMounts:
        - mountPath: /var/www/html
          name: synced
          subPath: html
        - name: config
          mountPath: /var/www/html/config/config.php.k8s
          subPath: config.php
        - mountPath: /pictures
          name: pictures
        # TODO: figure out a better way to handle NextCloud's upside-
        #  down naming hierarchy. If your photo collection has the year
        #  at a high level of the hierarchy, there's a conflict.
        - mountPath: /var/www/html/data/$CLOUD_USER1/files/Photos/2018
          name: pictures
          subPath: DigitalPics/2018/$CLOUD_USER1-nextcloud
        - mountPath: /var/www/html/data/$CLOUD_USER1/files/Photos/2019
          name: pictures
          subPath: DigitalPics/2019/$CLOUD_USER1-nextcloud
        - mountPath: /var/www/html/data/$CLOUD_USER1/files/Photos/2020
          name: pictures
          subPath: DigitalPics/2020/$CLOUD_USER1-nextcloud
        - mountPath: /var/www/html/data/$CLOUD_USER1/files/Photos/2021
          name: pictures
          subPath: DigitalPics/2021/$CLOUD_USER1-nextcloud
        - mountPath: /var/www/html/data/$CLOUD_USER1/files/Photos/2022
          name: pictures
          subPath: DigitalPics/2022/$CLOUD_USER1-nextcloud
        - mountPath: /var/www/html/data/$CLOUD_USER2/files/Photos/2018
          name: pictures
          subPath: DigitalPics/2018/$CLOUD_USER2-nextcloud
        - mountPath: /var/www/html/data/$CLOUD_USER2/files/Photos/2019
          name: pictures
          subPath: DigitalPics/2019/$CLOUD_USER2-nextcloud
        - mountPath: /var/www/html/data/$CLOUD_USER2/files/Photos/2020
          name: pictures
          subPath: DigitalPics/2020/$CLOUD_USER2-nextcloud
        - mountPath: /var/www/html/data/$CLOUD_USER2/files/Photos/2021
          name: pictures
          subPath: DigitalPics/2021/$CLOUD_USER2-nextcloud
        - mountPath: /var/www/html/data/$CLOUD_USER2/files/Photos/2022
          name: pictures
          subPath: DigitalPics/2022/$CLOUD_USER2-nextcloud
      dnsConfig:
        options:
        - name: use-vc
        - name: ndots
      volumes:
      - name: config
        configMap:
          name: $SERVICE_NAME
      - name: synced
        hostPath: { path: $K8S_VOLUMES_PATH/$SERVICE_NAME }
      - name: pictures
        persistentVolumeClaim:
          claimName: pictures
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: $SERVICE_NAME
data:
  config.php: |
    <?php
    ${DOL}CONFIG = array (
      'apps_paths' => 
      array (
        0 => 
        array (
          'path' => '/var/www/html/apps',
          'url' => '/apps',
          'writable' => false,
        ),
        1 => 
        array (
          'path' => '/var/www/html/custom_apps',
          'url' => '/custom_apps',
          'writable' => true,
        ),
      ),
      # Entries generated by auto-installer: leave blank initially,
      # TODO set these env vars after auto-generation.
      'instanceid' => '$NC_INSTANCEID',
      'passwordsalt' => '$NC_PASSWORDSALT',
      'secret' => getenv('SECRET'),
      'version' => '$VERSION_NEXTCLOUD_PREV',
      'trusted_domains' => array ('$SERVICE_NAME.$DOMAIN'),
      'datadirectory' => '/var/www/html/data',
      'overwrite.cli.url' => 'https://$SERVICE_NAME.$DOMAIN',
      'dbtype' => 'mysql',
      'dbname' => 'nextcloud',
      'dbhost' => 'db00',
      'dbport' => '',
      'dbtableprefix' => 'oc_',
      'mysql.utf8mb4' => true,
      'dbuser' => 'nextcloud',
      'dbpassword' => getenv('DB_PASSWORD'),
      'installed' => true,
      'overwriteprotocol' => 'https',
      'ldapIgnoreNamingRules' => false,
      'ldapProviderFactory' => '\\OCA\\User_LDAP\\LDAPProviderFactory',
      'mail_smtpmode' => 'smtp',
      'mail_smtpauthtype' => 'LOGIN',
      'mail_from_address' => 'admin',
      'mail_domain' => '$SERVICE_NAME.$DOMAIN',
      'mail_smtphost' => 'smtp.$DOMAIN',
      'preview_max_x' => 256,
      'preview_max_y' => 256,
      'loglevel' => 2,
      'debug' => false,
      'maintenance' => false,
      'theme' => '',
      'trusted_proxies' => array ('10.244.0.0/16'),
      'memcache.distributed' => '\OC\Memcache\Redis',
      'memcache.local' => '\OC\Memcache\Redis',
      'memcache.locking' => '\OC\Memcache\Redis',
      'redis' => array(
        'host' => getenv('REDIS_HOST'),
        'port' => 6379,
      ),
    )
    ?>
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $SERVICE_NAME-ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/client-body-buffer-size: 1280m
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 1280m
    nginx.ingress.kubernetes.io/configuration-snippet: |
      fastcgi_buffers 32 32K;
      fastcgi_buffer_size 32K;
      fastcgi_max_temp_file_size 0;
      fastcgi_read_timeout 240;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

spec:
  tls:
  - secretName: tls-$SERVICE_NAME
    hosts:
    - $SERVICE_NAME.$DOMAIN
  rules:
  - host: $SERVICE_NAME.$DOMAIN
    http:
      paths:
      - path: /
        backend:
          service:
            name: $SERVICE_NAME
            port:
              number: 80
        pathType: Prefix
---
apiVersion: v1
kind: Service
metadata:
  name: $SERVICE_NAME-redis
spec:
  clusterIP: None
  ports:
  - port: 6379
  selector:
    app.kubernetes.io/name: $SERVICE_NAME-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $SERVICE_NAME-redis
  labels:
    app.kubernetes.io/name: $SERVICE_NAME-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME-redis
  selector:
    matchLabels:
      app.kubernetes.io/name: $SERVICE_NAME-redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: $SERVICE_NAME-redis
    spec:
      containers:
      - name: redis
        image: redis:3.2.11-alpine
        ports:
        - containerPort: 6379
